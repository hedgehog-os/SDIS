from datetime import datetime
from typing import List, Optional, TYPE_CHECKING

if TYPE_CHECKING:
    from experiments_and_equipments.Chemical import Chemical


class Reaction:
    def __init__(self,
                 reaction_id: int,
                 description: str,
                 reactants: Optional[List["Chemical"]] = None,
                 products: Optional[List["Chemical"]] = None,
                 conditions: Optional[str] = None,
                 recorded_at: Optional[datetime] = None) -> None:
        self.reaction_id: int = reaction_id
        self.description: str = description
        self.reactants: List["Chemical"] = reactants or []
        self.products: List["Chemical"] = products or []
        self.conditions: Optional[str] = conditions
        self.recorded_at: datetime = recorded_at or datetime.now()

    def add_reactant(self, chemical: "Chemical") -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–µ—â–µ—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ."""
        if chemical not in self.reactants:
            self.reactants.append(chemical)
            chemical.add_reaction(self)

    def add_product(self, chemical: "Chemical") -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–µ—â–µ—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ."""
        if chemical not in self.products:
            self.products.append(chemical)
            chemical.add_reaction(self)

    def remove_chemical(self, chemical: "Chemical") -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤–µ—â–µ—Å—Ç–≤–æ –∏–∑ —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ —Å–≤—è–∑–∞–Ω–æ."""
        if chemical in self.reactants:
            self.reactants.remove(chemical)
        if chemical in self.products:
            self.products.remove(chemical)
        if self in chemical.reactions:
            chemical.reactions.remove(self)

    def involves_chemical(self, chemical: "Chemical") -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–µ—â–µ—Å—Ç–≤–æ –≤ —Ä–µ–∞–∫—Ü–∏–∏ –∫–∞–∫ —Ä–µ–∞–≥–µ–Ω—Ç –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç."""
        return chemical in self.reactants or chemical in self.products

    def get_all_chemicals(self) -> List["Chemical"]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–µ—â–µ—Å—Ç–≤–∞, —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ —Ä–µ–∞–∫—Ü–∏–∏."""
        return list(set(self.reactants + self.products))

    def summarize(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏."""
        reactant_names = ', '.join(c.name for c in self.reactants) or '‚Äî'
        product_names = ', '.join(c.name for c in self.products) or '‚Äî'
        return (
            f"üß™ Reaction #{self.reaction_id}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {self.description}\n"
            f"–†–µ–∞–≥–µ–Ω—Ç—ã: {reactant_names}\n"
            f"–ü—Ä–æ–¥—É–∫—Ç—ã: {product_names}\n"
            f"–£—Å–ª–æ–≤–∏—è: {self.conditions or '‚Äî'}\n"
            f"–î–∞—Ç–∞: {self.recorded_at.strftime('%Y-%m-%d %H:%M')}"
        )

    def to_dict(self) -> dict:
        """–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return {
            "reaction_id": self.reaction_id,
            "description": self.description,
            "reactants": [c.chemical_id for c in self.reactants],
            "products": [c.chemical_id for c in self.products],
            "conditions": self.conditions,
            "recorded_at": self.recorded_at.isoformat()
        }

    def is_recent(self, days: int = 30) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ —Ä–µ–∞–∫—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π."""
        from datetime import datetime, timedelta
        return self.recorded_at >= datetime.now() - timedelta(days=days)

    def contains_formula(self, formula: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–µ—â–µ—Å—Ç–≤–æ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–æ–π –≤ —Ä–µ–∞–∫—Ü–∏–∏."""
        return any(c.formula == formula for c in self.get_all_chemicals())
